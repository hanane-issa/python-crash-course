Traceback (most recent call last):
  File "C:\Users\hanan\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\hanan\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\hanan\AppData\Local\Programs\Python\Python313\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\hanan\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\hanan\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\hanan\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\hanan\AppData\Local\Programs\Python\Python313\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# 1. Choose features
continuous_features = ['age', 'thalach', 'oldpeak', 'trestbps']
categorical_features = ['cp', 'thal', 'slope', 'sex']

# 2. One-hot encode categorical features
df_encoded = pd.get_dummies(df[categorical_features], drop_first=True)

# 3. Standardise continuous features
scaler = StandardScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df[continuous_features]), 
                         columns=continuous_features)

# 4. Combine encoded + scaled features
X_cluster = pd.concat([df_scaled, df_encoded], axis=1)

# 5. Run KMeans clustering
kmeans = KMeans(n_clusters=2, random_state=0)
df['cluster_mixed'] = kmeans.fit_predict(X_cluster)

# 6a. Compare clusters with heart disease labels
conf_matrix = pd.crosstab(df['cluster_mixed'], df['heart_disease_binary'], 
                          rownames=['Cluster'], colnames=['Heart Disease'])

# 6b. Optional: Plot heatmap with raw counts
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title("Cluster vs Heart Disease Label")
plt.ylabel("Cluster")
plt.xlabel("Heart Disease")
plt.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[24][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01msklearn[39;00m[34;01m.[39;00m[34;01mpreprocessing[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m StandardScaler
[32m      2[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01msklearn[39;00m[34;01m.[39;00m[34;01mcluster[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m KMeans
[32m      4[39m [38;5;66;03m# 1. Choose features[39;00m

[31mModuleNotFoundError[39m: No module named 'sklearn'

